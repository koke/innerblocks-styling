{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Image","src","alt","Heading","attributes","content","Paragraph","Group","children","blocks","MediaText","stack","className","join","Block","props","clientId","React","useContext","Context","selectedId","store","dispatch","parents","current","push","getBlockParents","hasChildren","byClientId","getBlock","hasParent","isSelected","isParentSelected","isAncestorSelected","includes","selectionClass","classes","classnames","onClick","event","type","selectBlock","stopPropagation","BlockList","map","block","index","BlockEdit","constructor","key","name","uuid","window","createContext","mapBlockParents","rootClientId","undefined","reduce","result","Object","assign","Rulers","length","shift","flattenBlocks","App","useReducer","state","action","console","log","Provider","value","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.070c6ca4.chunk.js","sourcesContent":["import React from 'react';\nimport uuid from 'uuid/v4';\nimport classnames from 'classnames';\nimport './App.css';\n\nconst Image = ( ) => {\n  return (\n    <img src=\"https://placehold.it/400x200\" alt=\"Placeholder\" />\n  );\n}\n\nconst Heading = ( { attributes } ) => {\n  return (\n    <h2>{ attributes.content }</h2>\n  );\n}\n\nconst Paragraph = ( { attributes } ) => {\n  return (\n    <h2>{ attributes.content }</h2>\n  );\n}\n\nconst Group = ( { children } ) => {\n  return (\n    <BlockList blocks={ children } />\n  );\n}\n\nconst MediaText = ( { attributes, children } ) => {\n  const { stack } = attributes;\n  return (\n    <div className={ [ 'media-text', stack && 'stack' ].join( ' ' ) }>\n      <Image />\n      <BlockList blocks={ children } />\n    </div>\n  );\n}\n\nconst Block = ( props ) => {\n  const {\n    clientId,\n    className,\n    children,\n  } = props;\n\n  const { store: selectedId, dispatch } = React.useContext(Context)\n  const parents = getBlockParents( clientId );\n  const block = getBlock( clientId );\n\n  const hasChildren = !! block.children;\n  const hasParent = !! parents[0];\n  const isSelected = selectedId && selectedId === clientId;\n  const isParentSelected = selectedId && selectedId === parents[0];\n  const isAncestorSelected = selectedId && parents.includes( selectedId );\n\n  const selectionClass = isSelected\n    ? hasChildren ? 'selectedParent' : 'selectedLeaf'\n    : hasParent\n      ? isParentSelected\n        ? 'childOfSelected'\n        : isAncestorSelected\n          ? 'neutral'\n          : hasChildren ? 'neutral' : 'full'\n      : hasChildren ? 'neutral' : 'full';\n\n  const classes = classnames(\n    className,\n    selectionClass,\n  );\n\n  const onClick = ( event ) => {\n    dispatch( selectBlock( clientId ) );\n    event.stopPropagation();\n  };\n\n  return (\n    <div\n      className={ classes }\n      onClick={ onClick }\n    >\n      { children }\n    </div>\n  );\n}\n\nconst BlockList = ( { blocks } ) => {\n  return (\n    <div className='block-list'>\n      {\n        blocks.map( ( block, index ) => {\n          const {\n            constructor: BlockEdit,\n            clientId,\n            ...props\n          } = block;\n\n          return (\n            <Block\n              key={ index }\n              className={ 'block ' + BlockEdit.name }\n              clientId={ clientId }\n            >\n              <BlockEdit { ...props } />\n            </Block>\n          );\n        } )\n      }\n    </div>\n  )\n}\n\nconst block = ( constructor, attributes = {}, children ) => {\n  const clientId = uuid();\n  return {\n    clientId,\n    constructor,\n    attributes,\n    children,\n  };\n};\n\nconst blocks = [\n  block( Heading, { content: 'An image' } ),\n  block( Image ),\n  block( Group, {}, [\n    block( Heading, { content: 'Group 1' } ),\n    block( MediaText, {}, [\n      block( Heading, { content: 'Media & Text 1' } ),\n      block( Paragraph, { content: 'Some other text' } ),\n    ] ),\n    block( Group, {}, [\n      block( Heading, { content: 'Group 1.1' } ),\n    ] ),\n  ] ),\n  block( Group, {}, [\n    block( Heading, { content: 'Group 2' } ),\n    block( MediaText, { stack: true }, [\n      block( Heading, { content: 'Media & Text 2' } ),\n      block( Paragraph, { content: 'Some other text' } ),\n    ] ),\n    block( Group, {}, [\n      block( Heading, { content: 'Group 2.1' } ),\n      block( Group, {}, [\n        block( Heading, { content: 'Group 2.1.1' } ),\n      ] ),\n      ] ),\n    block( Group, {}, [\n      block( Heading, { content: 'Group 2.2' } ),\n    ] ),\n  ] ),\n];\n\nwindow.blocks = blocks;\n\nfunction selectBlock( clientId ) {\n  return {\n    type: 'SELECT_BLOCK',\n    clientId,\n  }\n}\n\nconst Context = React.createContext()\n\nfunction mapBlockParents( blocks, rootClientId = '' ) {\n  if ( blocks === undefined ) {\n    return {}\n  }\n\n  return blocks.reduce( ( result, block ) => Object.assign(\n\t\tresult,\n\t\t{ [ block.clientId ]: rootClientId },\n\t\tmapBlockParents( block.children, block.clientId )\n\t), {} );\n}\nconst parents = mapBlockParents( blocks );\nblocks.parents = parents;\n\nfunction getBlockParents( clientId ) {\n  const parents = [];\n  let current = clientId;\n  while ( !! blocks.parents[ current ] ) {\n    current = blocks.parents[ current ];\n    parents.push( current );\n  }\n\n  return parents;\n}\n\nfunction flattenBlocks( blocks ) {\n\tconst result = {};\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n    const block = stack.shift();\n    const { children = [] } = block;\n\t\tstack.push( ...children );\n\t\tresult[ block.clientId ] = block;\n\t}\n\n\treturn result;\n}\nblocks.byClientId = flattenBlocks( blocks );\n\nfunction getBlock( clientId ) {\n  return blocks.byClientId[clientId];\n}\n\nfunction Rulers() {\n  return (\n    <div className='rulers'>\n      <div className=\"ruler-edges\"></div>\n      <div className=\"ruler-selected\"></div>\n      <div className=\"ruler-selected-children\"></div>\n      <div className=\"ruler-content\"></div>\n    </div>\n  );\n}\n\nfunction App() {\n  const [ store, dispatch ] = React.useReducer(\n    ( state, action ) => {\n      switch ( action.type ) {\n        case 'SELECT_BLOCK':\n          console.log( 'Selected:', action.clientId );\n          return action.clientId;\n        default:\n          return state;\n      }\n    },\n    undefined,\n  )\n  return (\n    <div className=\"App\">\n      <Context.Provider value={ { store, dispatch } }>\n        <Rulers />\n        <BlockList blocks={ blocks } />\n      </Context.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}