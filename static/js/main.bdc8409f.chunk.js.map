{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Block","props","block","BlockEdit","constructor","clientId","blockProps","React","useContext","Context","selectedId","store","dispatch","parents","current","blocks","push","getBlockParents","hasChildren","children","length","hasParent","isSelected","isParentSelected","isAncestorSelected","includes","selectors","selectionClass","classes","classnames","className","onClick","event","type","selectBlock","stopPropagation","Image","src","alt","Heading","attributes","content","Paragraph","Group","MediaText","stack","BlockList","map","index","key","uuid","window","createContext","mapBlockParents","rootClientId","undefined","reduce","result","Object","assign","Rulers","byClientId","shift","flattenBlocks","App","useReducer","state","action","console","log","Provider","value","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdc8409f.chunk.js","sourcesContent":["import React from 'react';\nimport uuid from 'uuid/v4';\nimport classnames from 'classnames';\nimport './App.css';\n\nconst Block = ( props ) => {\n  const {\n    block,\n  } = props;\n\n  const {\n    constructor: BlockEdit,\n    clientId,\n    ...blockProps\n  } = block;\n\n  const { store: selectedId, dispatch } = React.useContext(Context)\n  const parents = getBlockParents( clientId );\n\n  const hasChildren = !! ( block.children && block.children.length );\n  const hasParent = !! parents[0];\n  const isSelected = selectedId && selectedId === clientId;\n  const isParentSelected = selectedId && selectedId === parents[0];\n  const isAncestorSelected = selectedId && parents.includes( selectedId );\n\n  const selectors = {\n    hasChildren,\n    hasParent,\n    isSelected,\n    isParentSelected,\n    isAncestorSelected,\n  };\n\n  const selectionClass = isSelected\n    ? hasChildren ? 'selectedParent' : 'selectedLeaf'\n    : hasParent\n      ? isParentSelected\n        ? hasChildren\n          ? 'childOfSelected'\n          : 'childOfSelectedLeaf'\n        : isAncestorSelected\n          ? 'descendantOfSelectedLeaf'\n          : hasChildren ? 'neutral' : 'full'\n      : hasChildren ? 'neutral' : 'full';\n\n  const classes = classnames(\n    'block',\n    BlockEdit.className,\n    selectionClass,\n  );\n\n  const onClick = ( event ) => {\n    dispatch( selectBlock( clientId ) );\n    event.stopPropagation();\n  };\n\n  return (\n    <div\n      className={ classes }\n      onClick={ onClick }\n    >\n      <BlockEdit { ...blockProps } { ...selectors } />\n    </div>\n  );\n}\n\nconst Image = ( props ) => {\n  const { className } = props;\n  return (\n    <img src=\"https://placehold.it/400x200\" alt=\"Placeholder\" className={ className } />\n  );\n}\nImage.className = 'Image';\n\nconst Heading = ( { attributes } ) => {\n  return (\n    <h2>{ attributes.content }</h2>\n  );\n}\nHeading.className = 'Heading';\n\nconst Paragraph = ( { attributes } ) => {\n  return (\n    <h2>{ attributes.content }</h2>\n  );\n}\nParagraph.className = 'Paragraph';\n\nconst Group = ( { children } ) => {\n  const isEmpty = ! ( children && children.length );\n  return (\n    isEmpty\n      ? ( <div className='group-placeholder' /> )\n      : ( <BlockList blocks={ children } /> )\n  );\n}\nGroup.className = 'Group';\n\nconst MediaText = ( { attributes, children, isSelected, isAncestorSelected, isParentSelected } ) => {\n  const { stack } = attributes;\n\n  const selectionClass = isSelected\n    ? 'selected'\n    : isParentSelected ? 'parent-selected' : 'neutral';\n  return (\n    <div className={ classnames( 'media-text', stack && 'stack', selectionClass ) }>\n      <Image className={ classnames( 'media-container', selectionClass ) } />\n      <BlockList blocks={ children } />\n    </div>\n  );\n}\nMediaText.className = 'MediaText';\n\nconst BlockList = ( { blocks } ) => {\n  return (\n    <div className='block-list'>\n      {\n        blocks.map( ( block, index ) => {\n          return (\n            <Block key={ index } block={ block } />\n          );\n        } )\n      }\n    </div>\n  )\n}\n\nconst block = ( constructor, attributes = {}, children ) => {\n  const clientId = uuid();\n  return {\n    clientId,\n    constructor,\n    attributes,\n    children,\n  };\n};\n\nconst blocks = [\n  block( Heading, { content: 'An image' } ),\n  block( Group, {}, [] ),\n  block( Image ),\n  block( Group, {}, [\n    block( Heading, { content: 'Group 1' } ),\n    block( MediaText, {}, [\n      block( Heading, { content: 'Media & Text 1' } ),\n      block( Paragraph, { content: 'Some other text' } ),\n    ] ),\n    block( Group, {}, [\n      block( Heading, { content: 'Group 1.1' } ),\n    ] ),\n  ] ),\n  block( Group, {}, [\n    block( Heading, { content: 'Group 2' } ),\n    block( MediaText, { stack: true }, [\n      block( Heading, { content: 'Media & Text 2' } ),\n      block( Paragraph, { content: 'Some other text' } ),\n    ] ),\n    block( Group, {}, [\n      block( Heading, { content: 'Group 2.1' } ),\n      block( Group, {}, [\n        block( Heading, { content: 'Group 2.1.1' } ),\n        block( Group, {}, [] ),\n      ] ),\n      ] ),\n    block( Group, {}, [\n      block( Heading, { content: 'Group 2.2' } ),\n    ] ),\n  ] ),\n];\n\nwindow.blocks = blocks;\n\nfunction selectBlock( clientId ) {\n  return {\n    type: 'SELECT_BLOCK',\n    clientId,\n  }\n}\n\nconst Context = React.createContext()\n\nfunction mapBlockParents( blocks, rootClientId = '' ) {\n  if ( blocks === undefined ) {\n    return {}\n  }\n\n  return blocks.reduce( ( result, block ) => Object.assign(\n\t\tresult,\n\t\t{ [ block.clientId ]: rootClientId },\n\t\tmapBlockParents( block.children, block.clientId )\n\t), {} );\n}\nconst parents = mapBlockParents( blocks );\nblocks.parents = parents;\n\nfunction getBlockParents( clientId ) {\n  const parents = [];\n  let current = clientId;\n  while ( !! blocks.parents[ current ] ) {\n    current = blocks.parents[ current ];\n    parents.push( current );\n  }\n\n  return parents;\n}\n\nfunction flattenBlocks( blocks ) {\n\tconst result = {};\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n    const block = stack.shift();\n    const { children = [] } = block;\n\t\tstack.push( ...children );\n\t\tresult[ block.clientId ] = block;\n\t}\n\n\treturn result;\n}\nblocks.byClientId = flattenBlocks( blocks );\n\nfunction getBlock( clientId ) {\n  return blocks.byClientId[clientId];\n}\n\nfunction Rulers() {\n  return (\n    <div className='rulers'>\n      <div className=\"ruler-edges\"></div>\n      <div className=\"ruler-selected\"></div>\n      <div className=\"ruler-selected-children\"></div>\n      <div className=\"ruler-content\"></div>\n    </div>\n  );\n}\n\nfunction App() {\n  const [ store, dispatch ] = React.useReducer(\n    ( state, action ) => {\n      switch ( action.type ) {\n        case 'SELECT_BLOCK':\n          console.log( 'Selected:', action.clientId );\n          return action.clientId;\n        default:\n          return state;\n      }\n    },\n    undefined,\n  )\n  return (\n    <div className=\"App\">\n      <Context.Provider value={ { store, dispatch } }>\n        <Rulers />\n        <BlockList blocks={ blocks } />\n      </Context.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}